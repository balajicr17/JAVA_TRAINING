26)Regular Expressions-Regex
============================

The Java Regex or Regular Expression is an API to define a pattern for searching or manipulating strings.

** Majorly used for String Manipulations

Java Regex API provides 1 interface and 3 classes in java.util.regex package.

Example: Password Validation

The Matcher and Pattern classes provide the facility of Java regular expression. The java.util.regex package provides following classes and interfaces for regular expressions.

1)MatchResult interface

Note: Matcher is class is Implements of MatchResult Interface.

1)Matcher class
2)Pattern class
3)PatternSyntaxException class

==============================================================
Regex Metacharacters

The regular expression metacharacters work as shortcodes.

Regex	Description
.	Any character (may or may not match terminator)
\d	Any digits, short of [0-9]
\D	Any non-digit, short for [^0-9]
\s	Any whitespace character, short for [\t\n\x0B\f\r]
\S	Any non-whitespace character, short for [^\s]
\w	Any word character, short for [a-zA-Z_0-9]
\W	Any non-word character, short for [^\w]
\b	A word boundary
\B	A non word boundary

No.	Character Class	Description
1	[abc]	a, b, or c (simple class)
2	[^abc]	Any character except a, b, or c (negation)
3	[a-zA-Z]	a through z or A through Z, inclusive (range)
4	[a-d[m-p]]	a through d, or m through p: [a-dm-p] (union)
5	[a-z&&[def]]	d, e, or f (intersection)
6	[a-z&&[^bc]]	a through z, except for b and c: [ad-z] (subtraction)
7	[a-z&&[^m-p]]	a through z, and not m through p: [a-lq-z](subtraction)
=================================================================================


package testPackage;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegularExpressions {

	public void exampleOne() {

		Pattern pattern = Pattern.compile(".s");
		Matcher m = pattern.matcher("as");
		boolean matches = m.matches();
		System.out.println(matches);

		boolean matches2 = Pattern.compile(".ss").matcher("ats").matches();
		System.out.println(matches2);

		boolean matches3 = Pattern.matches(".s", "as");
		System.out.println(matches3);

		// The . (dot) represents a single character.
		// here we are validating String has only two characters and ends with s

	}

	public void exampleTwoCharatcerSequence() {
		// [amn]-a, or, m or n character should be there
		//Provide only single character form amn any one charater since it is a character match

		System.out.println(Pattern.matches("[amn]", "abcd"));// false
		System.out.println(Pattern.matches("[amn]", "amn"));// false

		System.out.println(Pattern.matches("[amn]", "a"));
		System.out.println(Pattern.matches("[amn]", "m"));
		System.out.println(Pattern.matches("[amn]", "n"));// true
		
		
		System.out.println(Pattern.matches("[^amn]", "a"));
		System.out.println(Pattern.matches("[^amn]", "t"));

		

	}
	
	public void exampleThree() {
		//. represents only single character
		
		System.out.println(Pattern.matches(".", "three"));
		System.out.println(Pattern.matches(".", "o"));
		
		//d represent any digit[0-9]
		System.out.println(Pattern.matches("\\d", "three"));
		System.out.println(Pattern.matches("\\d", "o"));
		System.out.println(Pattern.matches("\\d", "1"));
		System.out.println(Pattern.matches("\\d", "11"));//false Character match
		
		
		

	}
	
	public void exampleFour() {
		
		System.out.println(Pattern.matches("[a-zA-Z0-9]{0,6}", "arun32"));//true  
		System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "kkvarun32"));//false (more than 6 char)  
		System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "JA2Uk2"));//true  
		System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "arun$2"));//false ($ is not matched)
		System.out.println(Pattern.matches("[a-zA-Z0-9]{6,}", "testttpkdfnsnbfqfehf"));//more than six
	}
	
	public  void passwordMatch() {
		String pasword="test@123456R";
		String pasword2="test^123456R";
		boolean b = Pattern.matches("[a-zA-Z0-9@!@#$]{6,}", pasword);
		System.out.println(b);
		boolean b1 = Pattern.matches("[a-zA-Z0-9@!@#$]{6,}", pasword2);
		System.out.println(b1);

	}

	public static void main(String[] args) {
		RegularExpressions obj = new RegularExpressions();
		// obj.exampleOne();
		//obj.exampleTwoCharatcerSequence();
		//obj.exampleThree();
		//obj.exampleFour();
		obj.passwordMatch();

	}

}
